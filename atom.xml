<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>sladning</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-03-09T15:05:31.903Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>刻在心里的坚强</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>人间词话---ZJ</title>
    <link href="http://yoursite.com/2019/03/09/%E4%BA%BA%E9%97%B4%E8%AF%8D%E8%AF%9D---ZJ/"/>
    <id>http://yoursite.com/2019/03/09/人间词话---ZJ/</id>
    <published>2019-03-09T14:57:13.000Z</published>
    <updated>2019-03-09T15:05:31.903Z</updated>
    
    <content type="html"><![CDATA[<ul><li>没有人会拒绝微笑, 也没有人会拒绝真诚.</li><li>逢山开路, 遇水架桥.</li></ul><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;没有人会拒绝微笑, 也没有人会拒绝真诚.&lt;/li&gt;
&lt;li&gt;逢山开路, 遇水架桥.&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="人间词话" scheme="http://yoursite.com/tags/%E4%BA%BA%E9%97%B4%E8%AF%8D%E8%AF%9D/"/>
    
  </entry>
  
  <entry>
    <title>人间词话---送给自己</title>
    <link href="http://yoursite.com/2019/03/09/%E4%BA%BA%E9%97%B4%E8%AF%8D%E8%AF%9D---%E8%87%AA%E5%B7%B1/"/>
    <id>http://yoursite.com/2019/03/09/人间词话---自己/</id>
    <published>2019-03-09T14:57:13.000Z</published>
    <updated>2019-03-09T15:05:53.479Z</updated>
    
    <content type="html"><![CDATA[<ul><li>勇者愤怒, 抽刃向更强者.怯者愤怒, 却抽刀向更弱者</li><li>扬在脸上的微笑, 长在心里的善良,融进血液的骨气, 刻在生命里的坚强.</li><li>礼仪最重要的是在昭告自我,真正的宣誓是对自己说的话.   —陈果</li><li>对一切人,一切西乡都保持一种开放二友善的胸襟和气度的时候,才真正成为名副其实的大学生.   —陈果</li></ul><a id="more"></a><ul><li>挫折能使强者更强,弱者更弱,强者在面对中锻炼了自己,弱者在逃避中越发脆弱</li><li>最善言谈者就是最善于倾听的人</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;勇者愤怒, 抽刃向更强者.怯者愤怒, 却抽刀向更弱者&lt;/li&gt;
&lt;li&gt;扬在脸上的微笑, 长在心里的善良,融进血液的骨气, 刻在生命里的坚强.&lt;/li&gt;
&lt;li&gt;礼仪最重要的是在昭告自我,真正的宣誓是对自己说的话.   —陈果&lt;/li&gt;
&lt;li&gt;对一切人,一切西乡都保持一种开放二友善的胸襟和气度的时候,才真正成为名副其实的大学生.   —陈果&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="人间词话" scheme="http://yoursite.com/tags/%E4%BA%BA%E9%97%B4%E8%AF%8D%E8%AF%9D/"/>
    
  </entry>
  
  <entry>
    <title>人间词话---网易云评论</title>
    <link href="http://yoursite.com/2019/03/09/%E4%BA%BA%E9%97%B4%E8%AF%8D%E8%AF%9D---%E7%BD%91%E6%98%93%E4%BA%91%E8%AF%84%E8%AE%BA/"/>
    <id>http://yoursite.com/2019/03/09/人间词话---网易云评论/</id>
    <published>2019-03-09T14:57:13.000Z</published>
    <updated>2019-03-09T15:06:12.831Z</updated>
    
    <content type="html"><![CDATA[<h3 id="卿卿我我"><a href="#卿卿我我" class="headerlink" title="卿卿我我"></a>卿卿我我</h3><ul><li>写歌的人假正经, 听歌的人最无情.人要是桥请起来,听什么都像在唱自己.</li><li>校服是我和她唯一穿过的情侣装, 毕业照是我和她唯一的合影.</li></ul><a id="more"></a><h3 id="情怀"><a href="#情怀" class="headerlink" title="情怀"></a>情怀</h3><ul><li>愿走出半生, 归来仍是少年.</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;卿卿我我&quot;&gt;&lt;a href=&quot;#卿卿我我&quot; class=&quot;headerlink&quot; title=&quot;卿卿我我&quot;&gt;&lt;/a&gt;卿卿我我&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;写歌的人假正经, 听歌的人最无情.人要是桥请起来,听什么都像在唱自己.&lt;/li&gt;
&lt;li&gt;校服是我和她唯一穿过的情侣装, 毕业照是我和她唯一的合影.&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="人间词话" scheme="http://yoursite.com/tags/%E4%BA%BA%E9%97%B4%E8%AF%8D%E8%AF%9D/"/>
    
      <category term="网易云评论" scheme="http://yoursite.com/tags/%E7%BD%91%E6%98%93%E4%BA%91%E8%AF%84%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>Java基础知识---面向对象(1)</title>
    <link href="http://yoursite.com/2019/03/09/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86---%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(1)/"/>
    <id>http://yoursite.com/2019/03/09/Java基础知识---面向对象(1)/</id>
    <published>2019-03-09T02:37:18.000Z</published>
    <updated>2019-03-09T14:21:20.775Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-面向过程的思想和面向对象的思想"><a href="#一-面向过程的思想和面向对象的思想" class="headerlink" title="一. 面向过程的思想和面向对象的思想"></a>一. 面向过程的思想和面向对象的思想</h1><h3 id="面向过程"><a href="#面向过程" class="headerlink" title="面向过程"></a>面向过程</h3><blockquote><p><strong>自顶向下,逐步细化</strong> </p></blockquote><p>​    <strong>面向解决问题的过程进行编程</strong> </p><p>​    按照步骤化解决问题.(一个问题,分析这个问题如何去解决,第一步做什么, 第二步什么…), 当我们用面向过程的思想去编程或解决问题时，首先一定要把详细的实现过程弄清楚。一旦过程设计清楚，代码的实现简直轻而易举。</p><a id="more"></a><h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><blockquote><p>万物皆对象, 人在思考的时候，首先眼睛里看到的是一个一个的对象。，<strong>实体(对象)就是动作的支配者</strong>，没有实体，就肯定没有动作发生！</p></blockquote><p>​    在编程的时候尽可能的去模拟真实的现实世界，按照现实世界中的逻辑去处理一个问题，分析问题中参与其中的有<strong>哪些实体</strong>，这些实体应该<strong>有什么属性和方法</strong>，我们<strong>如何通过调用这些实体的属性和方法</strong>去解决问题。</p><p>拿到一个问题,应该分析 :</p><ol><li>这个问题里面有哪些类和对象</li><li>在分析这些类和对象应该具有哪些属性和方法</li><li>分析类和类之间具有什么关系</li></ol><blockquote><p>设计思维: 合适的方法应该出现在合适的类里面</p></blockquote><h1 id="二-类和对象"><a href="#二-类和对象" class="headerlink" title="二. 类和对象"></a>二. 类和对象</h1><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><h4 id="一类事物的抽象"><a href="#一类事物的抽象" class="headerlink" title="一类事物的抽象"></a>一类事物的抽象</h4><p>包括属性(静态)和方法(动态)</p><blockquote><p>Java中属性或者成员变量是一回事,方法就是函数, 不同的叫法</p></blockquote><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><h4 id="一类事物的具体的某一个东西-符合这类事物的具体特征"><a href="#一类事物的具体的某一个东西-符合这类事物的具体特征" class="headerlink" title="一类事物的具体的某一个东西(符合这类事物的具体特征)"></a>一类事物的具体的某一个东西(符合这类事物的具体特征)</h4><blockquote><p>在Java中, 对象就是类的实例化</p></blockquote><h4 id="随笔"><a href="#随笔" class="headerlink" title="随笔:"></a>随笔:</h4><blockquote><p>对象和类是分不开的，必须首先定义类才能有对象</p></blockquote><h1 id="三-面向过程与面向对象的特点"><a href="#三-面向过程与面向对象的特点" class="headerlink" title="三. 面向过程与面向对象的特点"></a>三. 面向过程与面向对象的特点</h1><h3 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h3><ol><li>都可以实现代码重用和模块化编程，但是面对对象的模块化更深，数据更封闭，也更安全！因为面向对象的封装性更强！</li><li>面对对象的思维方式更加贴近于现实生活，更容易解决大型的复杂的业务逻辑</li><li>从前期开发角度上来看，面对对象远比面向过程要复杂，但是从维护和扩展功能的角度上来看，面对对象远比面向过程要简单！</li></ol><blockquote><p>当我们的业务逻辑比较简单时，使用面向过程能更快的实现</p><p>当我们的业务逻辑比较简单时，使用面向过程能更快的实现</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一-面向过程的思想和面向对象的思想&quot;&gt;&lt;a href=&quot;#一-面向过程的思想和面向对象的思想&quot; class=&quot;headerlink&quot; title=&quot;一. 面向过程的思想和面向对象的思想&quot;&gt;&lt;/a&gt;一. 面向过程的思想和面向对象的思想&lt;/h1&gt;&lt;h3 id=&quot;面向过程&quot;&gt;&lt;a href=&quot;#面向过程&quot; class=&quot;headerlink&quot; title=&quot;面向过程&quot;&gt;&lt;/a&gt;面向过程&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;自顶向下,逐步细化&lt;/strong&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;​    &lt;strong&gt;面向解决问题的过程进行编程&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;​    按照步骤化解决问题.(一个问题,分析这个问题如何去解决,第一步做什么, 第二步什么…), 当我们用面向过程的思想去编程或解决问题时，首先一定要把详细的实现过程弄清楚。一旦过程设计清楚，代码的实现简直轻而易举。&lt;/p&gt;
    
    </summary>
    
      <category term="java基础知识" scheme="http://yoursite.com/categories/java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
      <category term="面向对象" scheme="http://yoursite.com/categories/java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
    
      <category term="java基础知识" scheme="http://yoursite.com/tags/java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>Java基础知识---基础语法(2)</title>
    <link href="http://yoursite.com/2019/03/08/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86---%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95(2)/"/>
    <id>http://yoursite.com/2019/03/08/Java基础知识---基础语法(2)/</id>
    <published>2019-03-08T14:27:03.000Z</published>
    <updated>2019-03-09T02:32:03.777Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-语句"><a href="#一-语句" class="headerlink" title="一. 语句"></a>一. 语句</h1><h3 id="1-1-条件语句"><a href="#1-1-条件语句" class="headerlink" title="1.1 条件语句"></a>1.1 条件语句</h3><ul><li>if 语句</li><li>switch 语句</li><li>循环语句<ul><li>for 循环语句</li><li>while 循环与do while 循环</li></ul></li><li>break 和 continue 语句</li></ul><a id="more"></a><h1 id="二-方法"><a href="#二-方法" class="headerlink" title="二. 方法"></a>二. 方法</h1><ul><li>一段用来完成特定功能的代码片段</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[修饰符<span class="number">1</span> 修饰符<span class="number">2</span> ...] 返回值类型 方法名(形式参数列表) &#123;</span><br><span class="line">java 语句;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>方法可以有返回值，但可以不用这个返回值</strong>。方法首先要定义，然后才能调用</p></blockquote><h1 id="三、变量的作用域"><a href="#三、变量的作用域" class="headerlink" title="三、变量的作用域"></a>三、<strong>变量的作用域</strong></h1><p>　　变量的作用域只在“{  }”有效，出了这个“{  }”就没有作用了</p><h1 id="四、递归调用"><a href="#四、递归调用" class="headerlink" title="四、递归调用"></a>四、<strong>递归调用</strong></h1><p>　　递归：<strong>在一个方法内部对自身的调用就称为递归</strong></p><blockquote><p>具体的参考 <strong>孤傲苍狼</strong> 博客</p></blockquote><h1 id="五、程序的执行过程"><a href="#五、程序的执行过程" class="headerlink" title="五、程序的执行过程"></a>五、<strong>程序的执行过程</strong></h1><p><img src="E:\blog\source\images\java基础知识\程序执行过程.png" alt="程序执行过程"></p><p>参考博文: 孤傲苍狼  <a href="https://www.cnblogs.com/xdp-gacl/p/3627241.html" target="_blank" rel="noopener">java基础学习总结——基础语法2</a> </p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一-语句&quot;&gt;&lt;a href=&quot;#一-语句&quot; class=&quot;headerlink&quot; title=&quot;一. 语句&quot;&gt;&lt;/a&gt;一. 语句&lt;/h1&gt;&lt;h3 id=&quot;1-1-条件语句&quot;&gt;&lt;a href=&quot;#1-1-条件语句&quot; class=&quot;headerlink&quot; title=&quot;1.1 条件语句&quot;&gt;&lt;/a&gt;1.1 条件语句&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;if 语句&lt;/li&gt;
&lt;li&gt;switch 语句&lt;/li&gt;
&lt;li&gt;循环语句&lt;ul&gt;
&lt;li&gt;for 循环语句&lt;/li&gt;
&lt;li&gt;while 循环与do while 循环&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;break 和 continue 语句&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="java基础知识" scheme="http://yoursite.com/categories/java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
      <category term="基础语法" scheme="http://yoursite.com/categories/java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    
    
      <category term="java基础知识" scheme="http://yoursite.com/tags/java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>Java基础知识---基础语法(1)</title>
    <link href="http://yoursite.com/2019/03/08/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86---%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95(1)/"/>
    <id>http://yoursite.com/2019/03/08/Java基础知识---基础语法(1)/</id>
    <published>2019-03-08T13:36:31.000Z</published>
    <updated>2019-03-09T03:34:18.038Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-标识符"><a href="#一-标识符" class="headerlink" title="一.标识符"></a>一.标识符</h1><p>​    对于各种变量, 方法和类等要素 <strong>命名时使用的字符序列</strong> 成为标识符</p><blockquote><p>凡事自己可以命名的地方都叫标识符,都遵循标识符的规则</p></blockquote><a id="more"></a><h1 id="二-关键字"><a href="#二-关键字" class="headerlink" title="二.关键字"></a>二.关键字</h1><p>​    一些赋以特定的含义, <strong>用作专门用途的字符串</strong> 成为关键字</p><blockquote><p>大部分编辑会将关键字用特殊方式标出</p><p>所有Java关键字都是小写英文</p></blockquote><h3 id="三-java基础数据类型"><a href="#三-java基础数据类型" class="headerlink" title="三.  java基础数据类型"></a>三.  java基础数据类型</h3><h4 id="Java常量"><a href="#Java常量" class="headerlink" title="Java常量"></a>Java常量</h4><p>​    eg: 整型常量: 123, 字符常量: ‘a’</p><blockquote><p>注意: 区分字符常量和字符串常量</p><p>注意: “常量”这个名词还会用在另外其它语境中表示 <strong>值不可变的变量</strong> </p></blockquote><h4 id="Java变量"><a href="#Java变量" class="headerlink" title="Java变量"></a>Java变量</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//变量i(变量的名字)中存放常量100(变量的值)</span></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">100</span>; </span><br><span class="line"><span class="keyword">float</span> f = <span class="number">3.14</span>;</span><br><span class="line">String s = <span class="string">"hello"</span>;</span><br></pre></td></tr></table></figure><blockquote><p>变量是 <strong>内存</strong> 中的一小块区域, 使用 <strong>变量名</strong> 来访问这块区域</p><p>因此,每一个变量使用前必须要先 <strong>声明</strong>, 然后必须进行 <strong>赋值</strong> (填充内容), 才能使用</p></blockquote><h5 id="补充-本质上理解"><a href="#补充-本质上理解" class="headerlink" title="补充(本质上理解):"></a>补充(本质上理解):</h5><blockquote><ul><li><p>一个程序在运行的时候，实际上这个程序是位于内存里面，然后才开始运行。一个.exe文件 <strong>存放在硬盘上是无法运行的</strong> ，在硬盘上看到的.exe文件无非就是一个文件而已，当我们双击这个.exe文件时，运行起来的时候实际上是 <strong>整个.exe文件被放在了在内存里面</strong> ，然后操作系统找到main方法，也就是程序的入口，然后就开始执行了。执行的过程之中，<strong>会不断地在内存里面分配一些区域</strong> </p></li><li><p>变量在内存里面就是一小块区域，变量有两个概念，一个是变量的名字，另一个是变量的值</p><p>即这一小块区域是有名字的，里面装着一个值，因此以后要想访问这小块区域里面的内容就可以根据这小块区域的名字来访问了。因此，<strong>变量的本质就是一小块内存区域</strong> 。就变量来说，该在内存里面分配多大的存储空间呢？不同的变量类型分配不同大小的存储空间，每一个变量都是属于特定的数据类型的，声明成不同的数据类型，它就在内存里面分配不同的存储空间。</p></li></ul></blockquote><h4 id="Java变量的分类"><a href="#Java变量的分类" class="headerlink" title="Java变量的分类:"></a>Java变量的分类:</h4><p>按被声明的 <strong>位置</strong> 划分:</p><ul><li>局部变量: 方法或语句块内部定义的变量</li><li>成员变量: 方法外部, 累的内部定义的变量</li></ul><blockquote><p>类外面不能有变量的声明</p></blockquote><p>按所属数据的 <strong>数据类型</strong> 划分:</p><ul><li>基本数据类型变量</li><li>引用数据类型变量</li></ul><h3 id="Java数据类型"><a href="#Java数据类型" class="headerlink" title="Java数据类型"></a>Java数据类型</h3><h4 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h4><ul><li><strong>整数型:</strong> byte, short, int, long,</li><li><strong>浮动型:</strong> float, double</li><li><strong>布尔型:</strong> bool</li><li><strong>字符型:</strong> char</li></ul><h4 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h4><ul><li>类(class)</li><li>接口(interface)</li><li>数组</li></ul><h4 id="基本数据类型的转换"><a href="#基本数据类型的转换" class="headerlink" title="基本数据类型的转换"></a>基本数据类型的转换</h4><ul><li><p>boolean 类型不可以转换为其他的数据类型</p></li><li><p>容量小的类型自动转换为容量大的数据类型</p></li><li>容量大的类型转换为容量小的数据类型时, 要加上强制转换符,可能造成精度降低或溢出</li><li>有多种类型的数据混合运算时,系统首先自动的将所有数据类型转换成 <strong>容量最大</strong> 的那一种数据类型,然后在进行计算</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestConvert</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String arg[])</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i1 = <span class="number">123</span>; </span><br><span class="line">        <span class="keyword">int</span> i2 = <span class="number">456</span>;</span><br><span class="line">        <span class="keyword">double</span> d1 = (i1+i2)*<span class="number">1.2</span>;<span class="comment">//系统将转换为double型运算</span></span><br><span class="line">        <span class="keyword">float</span> f1 = (<span class="keyword">float</span>)((i1+i2)*<span class="number">1.2</span>);<span class="comment">//需要加强制转换符</span></span><br><span class="line">        <span class="keyword">byte</span> b1 = <span class="number">67</span>; </span><br><span class="line">        <span class="keyword">byte</span> b2 = <span class="number">89</span>;</span><br><span class="line">        <span class="keyword">byte</span> b3 = (<span class="keyword">byte</span>)(b1+b2);<span class="comment">//系统将转换为int型运算，需要强制转换符</span></span><br><span class="line">        System.out.println(b3);</span><br><span class="line">        <span class="keyword">double</span> d2 = <span class="number">1e200</span>;</span><br><span class="line">        <span class="keyword">float</span> f2 = (<span class="keyword">float</span>)d2;<span class="comment">//会产生溢出</span></span><br><span class="line">        System.out.println(f2);</span><br><span class="line">        <span class="keyword">float</span> f3 = <span class="number">1.23f</span>;<span class="comment">//必须加f</span></span><br><span class="line">        <span class="keyword">long</span> l1 = <span class="number">123</span>;</span><br><span class="line">        <span class="keyword">long</span> l2 = <span class="number">30000000000L</span>;<span class="comment">//必须加l</span></span><br><span class="line">        <span class="keyword">float</span> f = l1+l2+f3;<span class="comment">//系统将转换为float型计算</span></span><br><span class="line">        <span class="keyword">long</span> l = (<span class="keyword">long</span>)f;<span class="comment">//强制转换会舍去小数部分（不是四舍五入）</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考博文: <a href="https://www.cnblogs.com/xdp-gacl/p/3624567.html" target="_blank" rel="noopener">java基础学习总结——基础语法1</a> 孤傲苍狼</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一-标识符&quot;&gt;&lt;a href=&quot;#一-标识符&quot; class=&quot;headerlink&quot; title=&quot;一.标识符&quot;&gt;&lt;/a&gt;一.标识符&lt;/h1&gt;&lt;p&gt;​    对于各种变量, 方法和类等要素 &lt;strong&gt;命名时使用的字符序列&lt;/strong&gt; 成为标识符&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;凡事自己可以命名的地方都叫标识符,都遵循标识符的规则&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="java基础知识" scheme="http://yoursite.com/categories/java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
      <category term="基础语法" scheme="http://yoursite.com/categories/java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    
    
      <category term="java基础知识" scheme="http://yoursite.com/tags/java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>Java基础知识---面向对象(2)</title>
    <link href="http://yoursite.com/2019/03/08/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86---%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(2)/"/>
    <id>http://yoursite.com/2019/03/08/Java基础知识---面向对象(2)/</id>
    <published>2019-03-08T03:38:55.000Z</published>
    <updated>2019-03-09T14:19:09.901Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-Java类的定义"><a href="#一-Java类的定义" class="headerlink" title="一. Java类的定义"></a>一. Java类的定义</h3><blockquote><p>使用 <strong>class</strong> 关键字定义一个类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 成员变量(属性)定义</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age = <span class="number">10</span>;</span><br><span class="line">    <span class="comment">//方法定义</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> age; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        age = i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="二-成员变量"><a href="#二-成员变量" class="headerlink" title="二. 成员变量"></a>二. 成员变量</h3><ul><li>成员变量的作用范围为 <strong>整个类体</strong></li><li>定义成员变量可以对其初始化, 如果 <strong>不对其初始化</strong> , Java <strong>使用默认的值</strong> 对其初始化(若不记得JAVA对成员变量默认的初始化是多少的话，定义一个成员变量，不给它初始化，然后直接打印这个成员变量,进行查看)</li></ul><blockquote><p>在 <strong>JAVA</strong> 里面的任何变量首先应该要声明，然后再赋值，然后再使用</p></blockquote><p> <strong>成员变量和局部变量的区别:</strong> </p><table><thead><tr><th style="text-align:center"></th><th>成员变量</th><th>局部变量</th></tr></thead><tbody><tr><td style="text-align:center">不进行初始化</td><td>默认给初始化</td><td>不默认给初始化, <strong>在方法里面声明一个局部变量如果不给它初始化时就会出错</strong></td></tr></tbody></table><h3 id="三-基本概念-—-引用"><a href="#三-基本概念-—-引用" class="headerlink" title="三. 基本概念 — 引用"></a>三. 基本概念 — 引用</h3><p>​    Java语言中 <strong>除基本类型之外</strong> 的变量类型都称之为引用类型</p><ul><li>Java中的对象是通过引用对其操作的</li></ul><h4 id="基本类型与引用类型的区别"><a href="#基本类型与引用类型的区别" class="headerlink" title="基本类型与引用类型的区别:"></a>基本类型与引用类型的区别:</h4><table><thead><tr><th></th><th>基本类型</th><th>引用类型</th></tr></thead><tbody><tr><td>实现</td><td>当声明一个int  i=0时，系统会马上给这个i分配一个内存空间（在 <strong>栈内存</strong> 里面分配一小块区域用来装数字0），里面装着一个值为0，以后使用i这个名字马上就可以访问这个内存空间里面的值</td><td>定义好这个类之后，需要使用new关键字把这个类的对象实例化出来，也就是真真正正造出一个对象出来才能使用这个对象</td></tr><tr><td>内存</td><td>占 <strong>一块</strong> 内存</td><td>占 <strong>两块</strong> 内存</td></tr><tr><td>存放位置</td><td>栈内存</td><td>栈内存: 引用对象   堆内存: 真正的内容(new出来的东西)</td></tr></tbody></table><blockquote><p>不论是基本数据类型还是引用类型，<strong>都会先在栈中分配一块内存</strong> ，对于基本类型来说，这块区域包含的是 <strong>基本类型的内容</strong>；而对于引用类型来说，这块区域包含的是 <strong>指向真正内容的指针(存放真正内容的地址)</strong> ，真正的内容被手动的分配在堆上。</p></blockquote><h4 id="代码实例"><a href="#代码实例" class="headerlink" title="代码实例:"></a>代码实例:</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hero</span> </span>&#123;</span><br><span class="line">    String name; <span class="comment">//姓名</span></span><br><span class="line">    <span class="keyword">float</span> hp; <span class="comment">//血量</span></span><br><span class="line">      </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//代表创建了一个Hero对象</span></span><br><span class="line"><span class="comment">//但是也仅仅是创建了一个对象，没有办法访问它</span></span><br><span class="line"><span class="comment">//为了访问这个对象，会使用引用来代表这个对象</span></span><br><span class="line">        <span class="keyword">new</span> Hero();</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//"h"这个变量是Hero类型，叫做引用(也叫 引用对象,对象的引用)</span></span><br><span class="line"><span class="comment">//"="的意思指的h这个引用代表右侧创建的对象</span></span><br><span class="line"><span class="comment">//“代表” 在面向对象里，又叫做“指向” </span></span><br><span class="line">        <span class="comment">//引用h指向了新建的Hero对象</span></span><br><span class="line">        Hero h = <span class="keyword">new</span> Hero();  </span><br><span class="line">    &#125;      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="多个引用，一个对象，一个引用，多个对象区别："><a href="#多个引用，一个对象，一个引用，多个对象区别：" class="headerlink" title="多个引用，一个对象，一个引用，多个对象区别："></a>多个引用，一个对象，一个引用，多个对象<strong>区别：</strong></h4><ul><li>多个引用指向一个对象，操作的都是同一个对象</li><li>一个引用多个对象，之前的对象就没有办法访问了, 这个引用就指向了另一个对象</li></ul><h2 id="四-类和对象的关系"><a href="#四-类和对象的关系" class="headerlink" title="四. 类和对象的关系"></a>四. 类和对象的关系</h2><h4 id="如何在内存中区分类和对象"><a href="#如何在内存中区分类和对象" class="headerlink" title="如何在内存中区分类和对象"></a>如何在内存中区分类和对象</h4><ul><li><p>类是 <strong>静态</strong> 的概念, 在<strong>代码区</strong> </p></li><li><p>对象是new出来的, 位于 <strong>堆内存</strong> , <strong>类的每个成员变量在不同的对象中都有不同的值</strong> (除了静态变量,static),<strong>而方法只有一分,执行的时候才占用内存</strong> .</p></li></ul><p><img src="E:\blog\source\images\java基础知识\java面向对象__引用.png" alt="java面向对象__引用"></p><h2 id="五-构造方法"><a href="#五-构造方法" class="headerlink" title="五. 构造方法"></a>五. 构造方法</h2><h5 id="参考博文"><a href="#参考博文" class="headerlink" title="参考博文:"></a>参考博文:</h5><p>how2J <a href="http://how2j.cn/k/class-object/class-object-reference/307.html" target="_blank" rel="noopener">类和对象</a></p><p>孤傲苍狼 <a href="https://www.cnblogs.com/xdp-gacl/p/3628880.html" target="_blank" rel="noopener">java基础学习总结——面向对象2</a></p><p><a href="https://blog.csdn.net/weixin_43896747/article/details/85105144" target="_blank" rel="noopener">Java基本数据类型与引用数据类型 及在堆栈中内存的存储原理</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一-Java类的定义&quot;&gt;&lt;a href=&quot;#一-Java类的定义&quot; class=&quot;headerlink&quot; title=&quot;一. Java类的定义&quot;&gt;&lt;/a&gt;一. Java类的定义&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;使用 &lt;strong&gt;class&lt;/strong&gt; 关键字定义一个类&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Person&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 成员变量(属性)定义&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; id;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; age = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//方法定义&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getAge&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; age; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setAge&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        age = i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="java基础知识" scheme="http://yoursite.com/categories/java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
      <category term="java面向对象" scheme="http://yoursite.com/categories/java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
    
      <category term="java基础知识" scheme="http://yoursite.com/tags/java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>Java基础知识---static关键字</title>
    <link href="http://yoursite.com/2019/03/08/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86---static%E5%85%B3%E9%94%AE%E5%AD%97/"/>
    <id>http://yoursite.com/2019/03/08/Java基础知识---static关键字/</id>
    <published>2019-03-08T03:29:27.000Z</published>
    <updated>2019-03-08T14:37:18.303Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Static-关键字"><a href="#Static-关键字" class="headerlink" title="Static 关键字"></a>Static 关键字</h1><h3 id="理解"><a href="#理解" class="headerlink" title="理解:"></a>理解:</h3><ul><li>在类中用static声明的成员变量为 <strong>静态成员变量</strong> , 为该类的公共变量, 在第一次使用时被初始化, 这个成员变量 <strong>只有一份</strong> ，而且这一份是这个类 <strong>所有的对象</strong> 共享。</li><li>在static声明的方法为静态方法 ,在调用该方法时, 不会将对象的引用传递给他, 所以在static方法中 <strong>不可以访问非static的成员</strong></li><li>可以通过对象引用或 <strong>类名</strong> (不需要实例化)访问静态成员</li></ul><a id="more"></a><p>参考博文: <a href="https://www.cnblogs.com/xdp-gacl/p/3635948.html" target="_blank" rel="noopener">java基础学习总结——super关键字</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Static-关键字&quot;&gt;&lt;a href=&quot;#Static-关键字&quot; class=&quot;headerlink&quot; title=&quot;Static 关键字&quot;&gt;&lt;/a&gt;Static 关键字&lt;/h1&gt;&lt;h3 id=&quot;理解&quot;&gt;&lt;a href=&quot;#理解&quot; class=&quot;headerlink&quot; title=&quot;理解:&quot;&gt;&lt;/a&gt;理解:&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;在类中用static声明的成员变量为 &lt;strong&gt;静态成员变量&lt;/strong&gt; , 为该类的公共变量, 在第一次使用时被初始化, 这个成员变量 &lt;strong&gt;只有一份&lt;/strong&gt; ，而且这一份是这个类 &lt;strong&gt;所有的对象&lt;/strong&gt; 共享。&lt;/li&gt;
&lt;li&gt;在static声明的方法为静态方法 ,在调用该方法时, 不会将对象的引用传递给他, 所以在static方法中 &lt;strong&gt;不可以访问非static的成员&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;可以通过对象引用或 &lt;strong&gt;类名&lt;/strong&gt; (不需要实例化)访问静态成员&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="java基础知识" scheme="http://yoursite.com/categories/java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
      <category term="Static关键字" scheme="http://yoursite.com/categories/java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/Static%E5%85%B3%E9%94%AE%E5%AD%97/"/>
    
    
      <category term="java基础知识" scheme="http://yoursite.com/tags/java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>C语言基础知识</title>
    <link href="http://yoursite.com/2019/03/08/C%E8%AF%AD%E8%A8%80---%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>http://yoursite.com/2019/03/08/C语言---基础知识/</id>
    <published>2019-03-08T02:23:51.000Z</published>
    <updated>2019-03-08T05:25:09.756Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C语言基础知识"><a href="#C语言基础知识" class="headerlink" title="C语言基础知识:"></a>C语言基础知识:</h1><h3 id="指针"><a href="#指针" class="headerlink" title="指针:"></a>指针:</h3><p><strong>指针变量:</strong> 专门用来存放地址的特殊变量</p><a id="more"></a><table><thead><tr><th></th><th>指针 ( = 变量的值)</th><th>指针变量 ( = 变量)</th></tr></thead><tbody><tr><td>含义</td><td>地址</td><td>存放另一个变量地址的变量</td></tr></tbody></table><blockquote><p>指针与指针变量的关系类似于变量的值与变量的区别.</p><p>指针变量习惯上简称为 <strong>指针</strong> </p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a, * p;</span><br><span class="line">p = &amp;a;<span class="comment">// "&amp;a" 代表a的地址的值 </span></span><br><span class="line">a = <span class="number">3</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"p的值为 %d\n"</span>, p); <span class="comment">// p中存放的是 a 的地址 </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"*p的值为 %d"</span>, *p);<span class="comment">// * 号在 引用时表示"指向"操作, *p 代表 a,</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// "*"仅起到标志的作用, 表示该变量为指针变量, 不是变量名的一部分, 及指针变量名不包括 * </span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结构体"><a href="#结构体" class="headerlink" title="结构体:"></a>结构体:</h3><p><strong>定义:</strong> 将一些已知的数据类型放在一起来定义的一种数据类型</p><blockquote><p>结构体并没有创造出新的数据类型，这点要搞清楚。C语言的结构体和其他高级语言的类有点相似的概念，可以完成对一种事物的抽象。</p></blockquote><p><strong>代码中的定义:</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> 结构名 // 结构名是结构的标识符不是变量名</span></span><br><span class="line"><span class="class">&#123;</span> </span><br><span class="line">    类型  变量名; </span><br><span class="line">    类型  变量名;</span><br><span class="line">&#125; 结构变量;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 例子:</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> </span></span><br><span class="line"><span class="class">&#123;</span> </span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">8</span>]; </span><br><span class="line">    <span class="keyword">int</span> age; </span><br><span class="line">    <span class="keyword">char</span> sex[<span class="number">2</span>]; </span><br><span class="line">    <span class="keyword">char</span> depart[<span class="number">20</span>]; </span><br><span class="line">    <span class="keyword">float</span> wage1, wage2, wage3, wage4, wage5; </span><br><span class="line">&#125; Mike, Marry;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">John</span>;</span><span class="comment">// struct student:类型说明符, John 变量名</span></span><br><span class="line"><span class="comment">// 定义了两个 struct student 类型的变量 Mike, Marry</span></span><br></pre></td></tr></table></figure><h3 id="typedef"><a href="#typedef" class="headerlink" title="typedef:"></a>typedef:</h3><blockquote><p>使用 typedef 关键字来定义自己习惯的数据类型名称，来替代系统默认的基本类型名称、数组类型名称、指针类型名称与用户自定义的结构型名称、共用型名称、枚举型名称等。</p></blockquote><h4 id="eg-结构体"><a href="#eg-结构体" class="headerlink" title="eg: 结构体"></a>eg: 结构体</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 以结构体为例，下面我们定义一个名为 Point 的结构体</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">double</span> x;</span><br><span class="line">    <span class="keyword">double</span> y;</span><br><span class="line">    <span class="keyword">double</span> z;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 在调用这个结构体时，我们必须像下面的代码这样来调用这个结构体</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span> <span class="title">oPoint1</span> = &#123;</span><span class="number">100</span>，<span class="number">100</span>，<span class="number">0</span>&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span> <span class="title">oPoint2</span>;</span></span><br></pre></td></tr></table></figure><h5 id="现在，我们利用-typedef-定义这个结构体"><a href="#现在，我们利用-typedef-定义这个结构体" class="headerlink" title="现在，我们利用 typedef 定义这个结构体"></a>现在，我们利用 typedef 定义这个结构体</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tagPoint</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">double</span> x;</span><br><span class="line">    <span class="keyword">double</span> y;</span><br><span class="line">    <span class="keyword">double</span> z;</span><br><span class="line">&#125; Point;</span><br></pre></td></tr></table></figure><h5 id="上面的代码中，实际上完成了两个操作"><a href="#上面的代码中，实际上完成了两个操作" class="headerlink" title="上面的代码中，实际上完成了两个操作"></a>上面的代码中，实际上完成了两个操作</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.定义了一个新的结构类型</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tagPoint</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">double</span> x;</span><br><span class="line">    <span class="keyword">double</span> y;</span><br><span class="line">    <span class="keyword">double</span> z;</span><br><span class="line">    <span class="comment">//struct 关键字和 tagPoint 一起构成了这个结构类型，无论是否存在 typedef 关键字，这个结构都存在</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.使用 typedef 为这个新的结构起了一个别名，叫 Point</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tagPoint</span> <span class="title">Point</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">//现在你就可以像 <span class="title">int</span> 和 <span class="title">double</span> 那样直接使用 <span class="title">Point</span> 定义变量</span></span><br><span class="line"><span class="class"><span class="title">Point</span> <span class="title">oPoint1</span> = &#123;</span><span class="number">100</span>，<span class="number">100</span>，<span class="number">0</span>&#125;;</span><br><span class="line">Point oPoint2;</span><br></pre></td></tr></table></figure><p>参考文章:  <a href="http://c.biancheng.net/view/298.html" target="_blank" rel="noopener">typedef的用法，C语言typedef详解</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;C语言基础知识&quot;&gt;&lt;a href=&quot;#C语言基础知识&quot; class=&quot;headerlink&quot; title=&quot;C语言基础知识:&quot;&gt;&lt;/a&gt;C语言基础知识:&lt;/h1&gt;&lt;h3 id=&quot;指针&quot;&gt;&lt;a href=&quot;#指针&quot; class=&quot;headerlink&quot; title=&quot;指针:&quot;&gt;&lt;/a&gt;指针:&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;指针变量:&lt;/strong&gt; 专门用来存放地址的特殊变量&lt;/p&gt;
    
    </summary>
    
      <category term="C语言" scheme="http://yoursite.com/categories/C%E8%AF%AD%E8%A8%80/"/>
    
      <category term="基础知识" scheme="http://yoursite.com/categories/C%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="C语言" scheme="http://yoursite.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>数据结构---线性表</title>
    <link href="http://yoursite.com/2019/03/08/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84---%E7%BA%BF%E6%80%A7%E8%A1%A8/"/>
    <id>http://yoursite.com/2019/03/08/数据结构---线性表/</id>
    <published>2019-03-08T00:24:53.000Z</published>
    <updated>2019-03-08T14:38:16.758Z</updated>
    
    <content type="html"><![CDATA[<h1 id="线性表："><a href="#线性表：" class="headerlink" title="线性表："></a>线性表：</h1><h3 id="定义"><a href="#定义" class="headerlink" title="定义:"></a>定义:</h3><p>​    由 n(n≥0) 个数据特性相同的元素构成的 <strong>有限序列</strong> </p><a id="more"></a><h4 id="特点"><a href="#特点" class="headerlink" title="特点:"></a>特点:</h4><ul><li>存在唯一的一个被称为”第一个”的数据元素</li><li>存在唯一的一个被称为”最后一个”的数据元素</li><li>除第一个之外, 结构中的每个数据元素均只有一个前驱元素</li><li>除最后一个之外, 结构中的每个数据元素均只有一个后继元素</li></ul><h4 id="存储结构及运算"><a href="#存储结构及运算" class="headerlink" title="存储结构及运算:"></a>存储结构及运算:</h4><ul><li><strong>存储结构方式:</strong>  顺序存储方式(顺序表), 链接存储方式(链表)</li><li><strong>运算:</strong> <ol><li>线性表的初始化 </li><li>求表的长度 </li><li>取出表的元素 </li><li>查找运算</li></ol></li></ul><h4 id="随笔"><a href="#随笔" class="headerlink" title="随笔:"></a>随笔:</h4><ul><li>线性表中的数据元素之间的逻辑关系就是其相互位置上的 <strong>邻接关系</strong> ,该关系是线性的,因此,线性表是一种<strong>线性结构</strong> </li><li><strong>常见例子:</strong> 学生成绩表, 列车时刻表, 英文字母表</li></ul><h2 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h2><h4 id="特点-1"><a href="#特点-1" class="headerlink" title="特点:"></a>特点:</h4><p>​    逻辑关系相邻的两个结点在 <strong>物理位置</strong> 上也相邻, 结点的逻辑次序和物理次序一致</p><h4 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式:"></a>实现方式:</h4><p>​    数组</p><h4 id="基本操作的实现"><a href="#基本操作的实现" class="headerlink" title="基本操作的实现:"></a>基本操作的实现:</h4><ul><li>初始化</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Status InitList(SqList &amp;L)</span><br><span class="line">&#123;</span><br><span class="line">    L.elem = new</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    </p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;线性表：&quot;&gt;&lt;a href=&quot;#线性表：&quot; class=&quot;headerlink&quot; title=&quot;线性表：&quot;&gt;&lt;/a&gt;线性表：&lt;/h1&gt;&lt;h3 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义:&quot;&gt;&lt;/a&gt;定义:&lt;/h3&gt;&lt;p&gt;​    由 n(n≥0) 个数据特性相同的元素构成的 &lt;strong&gt;有限序列&lt;/strong&gt; &lt;/p&gt;
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="线性表" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%80%A7%E8%A1%A8/"/>
    
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>涂磊老师语录</title>
    <link href="http://yoursite.com/2019/03/07/%E4%BA%BA%E9%97%B4%E8%AF%8D%E8%AF%9D---%E8%87%AA%E6%88%91%E6%88%90%E9%95%BF---%E6%B6%82%E7%A3%8A/"/>
    <id>http://yoursite.com/2019/03/07/人间词话---自我成长---涂磊/</id>
    <published>2019-03-07T14:54:18.000Z</published>
    <updated>2019-03-08T05:25:49.954Z</updated>
    
    <content type="html"><![CDATA[<ul><li>我们总是善于去伤害那些爱我们的人， 因为我们根本伤害不了那些不爱我们的人;我们总是甘愿被那些我们爱的人伤害，那是因为我爱他们</li><li>喜欢可以心动，而爱一定会心痛；喜欢可以舍得，但爱一定舍不得；喜欢一个人，冬天不过是冬天，不过是漂亮一点而已；但是爱一个人，冬天可以变成春天；爱一个人，她落泪你就会跟着她一起落泪；而喜欢一个人，她落泪你只不过是安慰；喜欢是可以变成爱的，但如果爱了就说不出喜欢；喜欢是不排她的，而爱一定是排她的，唯一的；喜欢与责任无关，而爱一定要负责任，这就是喜欢和爱的区别</li></ul><a id="more"></a><ul><li>春风得意的浪子回头最珍贵，穷途末路的认错悔改最虚伪</li><li>你曾经买了一件很喜欢的衣裳却舍不得穿，郑重地供奉在衣柜里；许久之后，当你再看见它的时候，却发现它已经过时了。所以，你就这样与它错过了。你也曾经买了一块漂亮的蛋糕却舍不得吃，郑重地供奉在冰箱里；许久之后，当你再看见它的时候，却发现它已经过期了。所以，你也这样与它错过了。没有在最喜欢的时候上身的衣裳，没有在最可口的时候品尝的蛋糕，就像没有在最想做的时候去做的事情，都是遗憾。生命也有保存期限，想做的事该趁早去做。如果你只是把你的心愿郑重地供奉在心里，却未曾去实行，那么唯一的结果，就是与它错过，一如那件过时的衣裳，一如那块过期的蛋糕</li><li>有些人注定是你生命中的过客，却总是成为你记忆中的常客，但永远也仅止于做客</li><li>你以为责任是什么？你以为责任就是终身相守，扔几个钱在家里。真正的责任是要在乎你所爱的人的每一分每一秒的感受</li><li>男人无事献殷勤非奸即盗，女人对爱来者不拒不是欺就是爱</li><li>人最伟大的力量不是创造，而是自省！如果不能自我反省，不能看到自身的错误和不足，即使有非凡的力量，创造出的一切都只是埋没自己的坟墓！</li><li>越是嘴上说自己有原则的人，越是圆滑，因为他们的原则便是永远不说负责任的话，永远模棱两可！狡猾的眼神中永远透露的是欺骗，向下的嘴角代表的永远是严肃。</li><li>在我看来，绝大多数现代人的虚荣来自于虚伪，虚伪来自于自卑！在日常生活中衣着光鲜、牛逼哄哄的家伙其实内心很恐慌！</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;我们总是善于去伤害那些爱我们的人， 因为我们根本伤害不了那些不爱我们的人;我们总是甘愿被那些我们爱的人伤害，那是因为我爱他们&lt;/li&gt;
&lt;li&gt;喜欢可以心动，而爱一定会心痛；喜欢可以舍得，但爱一定舍不得；喜欢一个人，冬天不过是冬天，不过是漂亮一点而已；但是爱一个人，冬天可以变成春天；爱一个人，她落泪你就会跟着她一起落泪；而喜欢一个人，她落泪你只不过是安慰；喜欢是可以变成爱的，但如果爱了就说不出喜欢；喜欢是不排她的，而爱一定是排她的，唯一的；喜欢与责任无关，而爱一定要负责任，这就是喜欢和爱的区别&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="感悟" scheme="http://yoursite.com/categories/%E6%84%9F%E6%82%9F/"/>
    
      <category term="涂磊老师" scheme="http://yoursite.com/categories/%E6%84%9F%E6%82%9F/%E6%B6%82%E7%A3%8A%E8%80%81%E5%B8%88/"/>
    
    
      <category term="感悟" scheme="http://yoursite.com/tags/%E6%84%9F%E6%82%9F/"/>
    
      <category term="人生方向" scheme="http://yoursite.com/tags/%E4%BA%BA%E7%94%9F%E6%96%B9%E5%90%91/"/>
    
      <category term="智慧" scheme="http://yoursite.com/tags/%E6%99%BA%E6%85%A7/"/>
    
      <category term="成长" scheme="http://yoursite.com/tags/%E6%88%90%E9%95%BF/"/>
    
  </entry>
  
  <entry>
    <title>陈果老师语录</title>
    <link href="http://yoursite.com/2019/03/07/%E4%BA%BA%E9%97%B4%E8%AF%8D%E8%AF%9D---%E8%87%AA%E6%88%91%E6%88%90%E9%95%BF---%E9%99%88%E6%9E%9C/"/>
    <id>http://yoursite.com/2019/03/07/人间词话---自我成长---陈果/</id>
    <published>2019-03-07T14:54:18.000Z</published>
    <updated>2019-03-09T15:06:00.612Z</updated>
    
    <content type="html"><![CDATA[<ul><li>只有心灵才能洞察一切，世界上真正重要的东西要用心去看</li><li>你使用什么样的双眼观世界，就印证了你有怎样的心眼，如果心眼大，你所见的世界宽广无边，如果你心眼小，充满羡慕嫉妒恨，所见的世界也是偏狭丑陋</li><li>选择之所以称之为选择，一定是痛苦的，因为选项是不相上下的，能轻松做决定的，都不叫选择，选择意味着舍弃一种美好，承受一种痛苦，不安</li><li>回忆是一种重逢, 忘记是一份自由.</li></ul><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;只有心灵才能洞察一切，世界上真正重要的东西要用心去看&lt;/li&gt;
&lt;li&gt;你使用什么样的双眼观世界，就印证了你有怎样的心眼，如果心眼大，你所见的世界宽广无边，如果你心眼小，充满羡慕嫉妒恨，所见的世界也是偏狭丑陋&lt;/li&gt;
&lt;li&gt;选择之所以称之为选择，一定是痛苦的，因为选项是不相上下的，能轻松做决定的，都不叫选择，选择意味着舍弃一种美好，承受一种痛苦，不安&lt;/li&gt;
&lt;li&gt;回忆是一种重逢, 忘记是一份自由.&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="感悟" scheme="http://yoursite.com/categories/%E6%84%9F%E6%82%9F/"/>
    
      <category term="陈果老师" scheme="http://yoursite.com/categories/%E6%84%9F%E6%82%9F/%E9%99%88%E6%9E%9C%E8%80%81%E5%B8%88/"/>
    
    
      <category term="感悟" scheme="http://yoursite.com/tags/%E6%84%9F%E6%82%9F/"/>
    
      <category term="人生方向" scheme="http://yoursite.com/tags/%E4%BA%BA%E7%94%9F%E6%96%B9%E5%90%91/"/>
    
      <category term="成长" scheme="http://yoursite.com/tags/%E6%88%90%E9%95%BF/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 常用命令</title>
    <link href="http://yoursite.com/2019/03/07/Hexo---%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2019/03/07/Hexo---常用命令/</id>
    <published>2019-03-07T02:59:05.000Z</published>
    <updated>2019-03-08T05:25:14.844Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-写文章"><a href="#1-写文章" class="headerlink" title="1. 写文章"></a>1. 写文章</h2><ul><li>写文章<br> 你可以执行下列命令来创建一篇新文章。</li></ul><blockquote><p>hexo new  <title>    #新建文章，可以改成中文的，如“新文章”，如果标题包含空格的话，请使用引号括起来。</title></p></blockquote><ul><li>删除文章<br> 先删除目标文章，然后重新运行</li></ul><blockquote><p>hexo clean # 清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)<br> hexo g -d # 文件生成后立即部署网站</p></blockquote><a id="more"></a><ul><li>写完文章后，你可以使用</li></ul><blockquote><p>hexo g  # 全称<code>hexo generate</code> , 生成静态文件（generate：产生）<br> hexo s  # 全称<code>hexo server</code> , 启动服务器，默认情况下，访问网址为<code>http://localhost:4000/</code>在本地预览效果<br> hexo d  # 全称<code>hexo deploy</code>, 部署网站，同步到github上（deploy：部署）</p></blockquote><h2 id="2-分类和标签"><a href="#2-分类和标签" class="headerlink" title="2. 分类和标签"></a>2. 分类和标签</h2><ul><li>Front-matter 是文件最上方以 <code>---</code> 分隔的区域，用于指定个别文件的变量，举例来说：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">title: Hello World</span><br><span class="line">date: <span class="number">2013</span>/<span class="number">7</span>/<span class="number">13</span> <span class="number">20</span>:<span class="number">46</span>:<span class="number">25</span></span><br></pre></td></tr></table></figure><ul><li>以下是预先定义的参数，您可在模板中使用这些参数值并加以利用</li></ul><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>layout</code></td><td>布局</td><td></td></tr><tr><td><code>title</code></td><td>标题</td><td></td></tr><tr><td><code>date</code></td><td>建立日期</td><td>文件建立日期</td></tr><tr><td><code>updated</code></td><td>更新日期</td><td>文件更新日期</td></tr><tr><td><code>comments</code></td><td>开启文章的评论功能</td><td>true</td></tr><tr><td><code>tags</code></td><td>标签（不适用于分页）</td><td></td></tr><tr><td><code>categories</code></td><td>分类（不适用于分页）</td><td></td></tr><tr><td><code>permalink</code></td><td>覆盖文章网址</td></tr></tbody></table><ul><li><p>分类和标签</p><p>只有文章支持分类和标签，您可以在 <code>Front-matter</code> 中设置。在其他系统中，分类和标签听起来很接近，但是在 Hexo 中两者有着明显的差别：<strong>分类具有顺序性和层次性</strong>，也就是说 <code>Foo, Bar</code> 不等于 <code>Bar, Foo</code>；而标签没有顺序和层次。</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">categories:</span><br><span class="line">- Diary</span><br><span class="line">tags:</span><br><span class="line">- PS3</span><br><span class="line">- Games</span><br><span class="line"><span class="comment"># 会使分类Games成为PS3的子分类，而不是并列分类。因此，有必要为您的文章选择尽可能准确的分类</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-写文章&quot;&gt;&lt;a href=&quot;#1-写文章&quot; class=&quot;headerlink&quot; title=&quot;1. 写文章&quot;&gt;&lt;/a&gt;1. 写文章&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;写文章&lt;br&gt; 你可以执行下列命令来创建一篇新文章。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;hexo new  &lt;title&gt;    #新建文章，可以改成中文的，如“新文章”，如果标题包含空格的话，请使用引号括起来。&lt;/title&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;删除文章&lt;br&gt; 先删除目标文章，然后重新运行&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;hexo clean # 清除缓存文件 (&lt;code&gt;db.json&lt;/code&gt;) 和已生成的静态文件 (&lt;code&gt;public&lt;/code&gt;)&lt;br&gt; hexo g -d # 文件生成后立即部署网站&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://yoursite.com/categories/hexo/"/>
    
      <category term="基本操作" scheme="http://yoursite.com/categories/hexo/%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
      <category term="写作常用命令" scheme="http://yoursite.com/tags/%E5%86%99%E4%BD%9C%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>java面试经典题目（1-6题）</title>
    <link href="http://yoursite.com/2019/03/07/java%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%85%B8%E9%A2%98%E7%9B%AE%EF%BC%881-6%E9%A2%98%EF%BC%89/"/>
    <id>http://yoursite.com/2019/03/07/java面试经典题目（1-6题）/</id>
    <published>2019-03-07T02:00:00.000Z</published>
    <updated>2019-03-08T00:54:14.379Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-什么是Java虚拟机？为什么Java被称作是“平台无关的编程语言”？"><a href="#1-什么是Java虚拟机？为什么Java被称作是“平台无关的编程语言”？" class="headerlink" title="1.什么是Java虚拟机？为什么Java被称作是“平台无关的编程语言”？"></a>1.什么是Java虚拟机？为什么Java被称作是“平台无关的编程语言”？</h3><p>答案：</p><blockquote><p>运行原理：java源程序经过<code>javac</code> 编译器编译成二进制的<code>xx.class</code> 字节码文件, <code>xx.class</code> 在<strong>jvm</strong>（各平台装有不同的jvm）上运行，java解释器（jvm的一部分）会将<strong>相同的字节码</strong>解释成对应平台的机器码，进而执行。</p></blockquote><a id="more"></a><p>知识：</p><blockquote><p>一份 <code>xx.class</code> 文件(不会变化）被 <strong>不同的jvm</strong> 解释成 <strong>相对应的机器码</strong> </p><p><strong>机器码:</strong> 依附于硬件，根本不存在跨平台行，不同型号的CPU给相同的指令（eg：10011110）,解析成不同的结果</p></blockquote><p>题外知识：</p><blockquote><p><strong>JDK</strong> (Java Development Kit): Java开发工具包，针对于<strong>Java开发员的产品</strong>，JDK是整个Java的核心，包括了JRE, Java工具（javac【编译java源码的编译器】，java程序调试和分析的工具）和Java基础的类库（即Java API)</p><p><strong>JRE</strong> (Java runtime environment)：Java运行环境 ,针对于<strong>使用Java程序的用户</strong>，java程序运行做需要的软件环境，不是一个开发环境, 包含jvm，java基础类库, 不包含任何开发工具（如编译器和调试器）。</p><p><strong>JVM</strong> (Java Virtual Machine): Java虚拟机，实现java跨平台的最核心的部分，JVM屏蔽了与具体操作系统平台相关的信息，使得Java程序只需生成在Java虚拟机上运行的目标代码（字节码），就可以在多种平台上不加修改地运行</p></blockquote><h3 id="2-JDK和JRE的区别是什么？"><a href="#2-JDK和JRE的区别是什么？" class="headerlink" title="2.JDK和JRE的区别是什么？"></a>2.JDK和JRE的区别是什么？</h3><p>答案：</p><blockquote><p>详细区别见第一题</p><p>如果需要运行Java程序，只需要安装JRE（JRE根据不同操作系统有很多不同的版本）</p><p>如果需要编写Java程序，需要安装JDK</p></blockquote><p>补充知识：</p><blockquote><p>JRE和JVM的区别是什么？</p><p>JRE包括JVM和lib（Jvm所需要的类库），JRE里有运行<code>xx.class</code> 的<code>java.exe</code> </p><p>只有JVM还不能成class的执行，因为在解释class的时候JVM需要调用解释所需要的类库lib，而jre包含lib类库</p></blockquote><p>时间：2019.3.7</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-什么是Java虚拟机？为什么Java被称作是“平台无关的编程语言”？&quot;&gt;&lt;a href=&quot;#1-什么是Java虚拟机？为什么Java被称作是“平台无关的编程语言”？&quot; class=&quot;headerlink&quot; title=&quot;1.什么是Java虚拟机？为什么Java被称作是“平台无关的编程语言”？&quot;&gt;&lt;/a&gt;1.什么是Java虚拟机？为什么Java被称作是“平台无关的编程语言”？&lt;/h3&gt;&lt;p&gt;答案：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;运行原理：java源程序经过&lt;code&gt;javac&lt;/code&gt; 编译器编译成二进制的&lt;code&gt;xx.class&lt;/code&gt; 字节码文件, &lt;code&gt;xx.class&lt;/code&gt; 在&lt;strong&gt;jvm&lt;/strong&gt;（各平台装有不同的jvm）上运行，java解释器（jvm的一部分）会将&lt;strong&gt;相同的字节码&lt;/strong&gt;解释成对应平台的机器码，进而执行。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
      <category term="java面试经典题目" scheme="http://yoursite.com/categories/java/java%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%85%B8%E9%A2%98%E7%9B%AE/"/>
    
    
      <category term="java基础知识" scheme="http://yoursite.com/tags/java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="java面试经典题目" scheme="http://yoursite.com/tags/java%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%85%B8%E9%A2%98%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>人间词话---惊艳的文字</title>
    <link href="http://yoursite.com/2019/03/06/%E4%BA%BA%E9%97%B4%E8%AF%8D%E8%AF%9D---%E6%83%8A%E8%89%B3%E7%9A%84%E6%96%87%E5%AD%97/"/>
    <id>http://yoursite.com/2019/03/06/人间词话---惊艳的文字/</id>
    <published>2019-03-06T13:57:13.000Z</published>
    <updated>2019-03-09T15:05:04.393Z</updated>
    
    <content type="html"><![CDATA[<h3 id="现代诗"><a href="#现代诗" class="headerlink" title="现代诗"></a>现代诗</h3><ul><li>酒入豪肠，七分酿成了月光，余下的三分啸成剑气，绣口一吐，就半个盛唐。   —余光中《寻李白》</li></ul><a id="more"></a><h3 id="古诗"><a href="#古诗" class="headerlink" title="古诗"></a>古诗</h3><ul><li>少年不知愁滋味,爱上层楼,爱上层楼.为赋新词强说愁.而今识尽愁滋味,欲说还休,欲说还休,却道天凉好个秋.  —辛弃疾《丑奴儿》</li><li>十年生死两茫茫，不思量，自难忘。千里孤坟，无处话凄凉。纵使相逢应不识，尘满面，鬓如霜。夜来幽梦忽还乡，小轩窗，正梳妆。相顾无言，惟有泪千行。料得年年肠断处，明月夜，短松冈。    —苏轼</li></ul><h3 id="古文"><a href="#古文" class="headerlink" title="古文"></a>古文</h3><ul><li>斯是陋室,惟吾德馨.   —刘禹锡《陋室铭》</li><li>夏虫不可语冰   —孔子</li></ul><h3 id="文章摘要"><a href="#文章摘要" class="headerlink" title="文章摘要"></a>文章摘要</h3><ul><li>我知道我很大胆冒昧, 听说你朋友很多, 我不配高攀, 可是很想在你的朋友里凑个数目.   —钱钟书《围城》</li><li>别客气,我求你明天来.我想去吃,对自己没有好借口,借你的名义,自己享受一下,你就体贴下情,答应了吧.   —钱钟书《围城》</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;现代诗&quot;&gt;&lt;a href=&quot;#现代诗&quot; class=&quot;headerlink&quot; title=&quot;现代诗&quot;&gt;&lt;/a&gt;现代诗&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;酒入豪肠，七分酿成了月光，余下的三分啸成剑气，绣口一吐，就半个盛唐。   —余光中《寻李白》&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="人间词话" scheme="http://yoursite.com/tags/%E4%BA%BA%E9%97%B4%E8%AF%8D%E8%AF%9D/"/>
    
      <category term="现代诗" scheme="http://yoursite.com/tags/%E7%8E%B0%E4%BB%A3%E8%AF%97/"/>
    
      <category term="古诗" scheme="http://yoursite.com/tags/%E5%8F%A4%E8%AF%97/"/>
    
  </entry>
  
  <entry>
    <title>人间词话---文章</title>
    <link href="http://yoursite.com/2019/03/06/%E4%BA%BA%E9%97%B4%E8%AF%8D%E8%AF%9D---%E6%96%87%E7%AB%A0/"/>
    <id>http://yoursite.com/2019/03/06/人间词话---文章/</id>
    <published>2019-03-06T13:57:13.000Z</published>
    <updated>2019-03-09T15:03:44.981Z</updated>
    
    <content type="html"><![CDATA[<h1 id="感谢困难"><a href="#感谢困难" class="headerlink" title="感谢困难"></a>感谢困难</h1><p>​                                                                                林清玄<br>​    我做了一个梦。</p><p>　　梦见我在街上问人：“请问您可不可以给我一些困难、一些挫折，一些痛苦?”</p><p>　　所有的人都拒绝我，我着急地恳求别人：“那么，我雇用您，每小时五百元，请您给我一些折磨!”</p><p>　　那些陌生人摇摇头，沉默地离开，我因找不到愿意折磨我的人而惊醒。</p><p>　　我坐在床上发呆，是呀!困难，折磨，痛苦是多么珍贵!如果一切平顺，谁会静下来沉思，谁会生起智慧，谁又能在平凡安逸的日子中超越自我、登上高峰呢?</p><p>　　如果没有困难，谁又会谦卑地跪下来祈祷?谁又能相信有无边的宇宙?谁又能寄情于来生呢?</p><p>　　我深深地感谢着困难、挫折与痛苦。</p><p>　　也深深地感恩那些曾经折磨过我的人，他们是多么慈悲呀!我并未花钱聘雇他们，他们却以宝贵的时间来考验我、提升我，为了增长我的智慧。</p><a id="more"></a><h1 id="真正的高贵"><a href="#真正的高贵" class="headerlink" title="真正的高贵"></a>真正的高贵</h1><p>​                                                                                海明威</p><p>​    在风平浪静的大海，每个人都是领航员。</p><p>​    但是，只有阳光而无阴影，只有欢乐而无痛苦，那就不是人生。以最幸福的人的生活为例.他的生活也是一团缠结在一起的乱麻。痛苦与幸福交替出现,使得我们一会悲伤，一会高兴，甚至死亡本身也会使生命更加可爱。在人生的清醒的时刻，在悲伤与失落的阴影之下，人们与真实的自我最接近。</p><p>​    在生活和事业的种种事物中，性格比才智更能指导我们, 心灵比头脑更能引导我们,而由判断获得的克制, 耐心和教养比天分更能让我们受益。</p><p>​    我始终相信，内心生活开始更为严谨的人，他的外在生活也会变得更为简朴。在一个物欲横流的年代，但愿我能向世人表明，人类真正需求少得多么可怜。</p><p>​    反思自己的过错不至于重蹈覆辙才是真正的悔悟, 高人一等并没有什么值得夸耀的。真正的高贵是优于过去的自己。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;感谢困难&quot;&gt;&lt;a href=&quot;#感谢困难&quot; class=&quot;headerlink&quot; title=&quot;感谢困难&quot;&gt;&lt;/a&gt;感谢困难&lt;/h1&gt;&lt;p&gt;​                                                                                林清玄&lt;br&gt;​    我做了一个梦。&lt;/p&gt;
&lt;p&gt;　　梦见我在街上问人：“请问您可不可以给我一些困难、一些挫折，一些痛苦?”&lt;/p&gt;
&lt;p&gt;　　所有的人都拒绝我，我着急地恳求别人：“那么，我雇用您，每小时五百元，请您给我一些折磨!”&lt;/p&gt;
&lt;p&gt;　　那些陌生人摇摇头，沉默地离开，我因找不到愿意折磨我的人而惊醒。&lt;/p&gt;
&lt;p&gt;　　我坐在床上发呆，是呀!困难，折磨，痛苦是多么珍贵!如果一切平顺，谁会静下来沉思，谁会生起智慧，谁又能在平凡安逸的日子中超越自我、登上高峰呢?&lt;/p&gt;
&lt;p&gt;　　如果没有困难，谁又会谦卑地跪下来祈祷?谁又能相信有无边的宇宙?谁又能寄情于来生呢?&lt;/p&gt;
&lt;p&gt;　　我深深地感谢着困难、挫折与痛苦。&lt;/p&gt;
&lt;p&gt;　　也深深地感恩那些曾经折磨过我的人，他们是多么慈悲呀!我并未花钱聘雇他们，他们却以宝贵的时间来考验我、提升我，为了增长我的智慧。&lt;/p&gt;
    
    </summary>
    
    
      <category term="人间词话" scheme="http://yoursite.com/tags/%E4%BA%BA%E9%97%B4%E8%AF%8D%E8%AF%9D/"/>
    
  </entry>
  
  <entry>
    <title>曾仕强教授语录</title>
    <link href="http://yoursite.com/2019/01/10/%E4%BA%BA%E9%97%B4%E8%AF%8D%E8%AF%9D---%E8%87%AA%E6%88%91%E6%88%90%E9%95%BF---%E6%9B%BE%E4%BB%95%E5%BC%BA/"/>
    <id>http://yoursite.com/2019/01/10/人间词话---自我成长---曾仕强/</id>
    <published>2019-01-10T14:19:18.000Z</published>
    <updated>2019-03-07T15:05:27.788Z</updated>
    
    <content type="html"><![CDATA[<ul><li>很多事情，从不同的角度看，才能体会到其中的奥妙</li><li>做一个领导者，一定要充分了解下属的特性是什么，及时的下达合理的命令，而且效果要非常的良好，此为将才</li><li>事事都透露着一个人的能力</li><li>顾全大局，大局的前提底下，很多细小的事情，不用太过于考虑</li></ul><a id="more"></a><ul><li>一件事，从不同的角度看，都有道理，怎么讲都对，不是对不对的事，是价值观的体现</li><li>得意勿忘形，人在得意时，千万不能忘形，做事情随他爱怎样怎样，变为得意忘形，当一个人处于逆境的时候，他还会谨慎一点，当一个人处顺境的时候，他就开始沉不住气</li><li>形势比人强</li><li>人生的理想在于不断提升自己的层次</li><li>有智慧没知识容易陷入空想，一事无成。有知识没智慧，就不要埋怨被人当做工具使用，用毕即弃。要善用智慧来运用知识，以求合理的表现</li><li>处逆境容易，正因留意，处顺境很难，正因大意</li><li>你要很谨慎地去保留你独特的地方，这个独特之处就是你之所以为人的地方。能够自我成全，才是人最伟大的地方</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;很多事情，从不同的角度看，才能体会到其中的奥妙&lt;/li&gt;
&lt;li&gt;做一个领导者，一定要充分了解下属的特性是什么，及时的下达合理的命令，而且效果要非常的良好，此为将才&lt;/li&gt;
&lt;li&gt;事事都透露着一个人的能力&lt;/li&gt;
&lt;li&gt;顾全大局，大局的前提底下，很多细小的事情，不用太过于考虑&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="感悟" scheme="http://yoursite.com/categories/%E6%84%9F%E6%82%9F/"/>
    
      <category term="曾仕强教授" scheme="http://yoursite.com/categories/%E6%84%9F%E6%82%9F/%E6%9B%BE%E4%BB%95%E5%BC%BA%E6%95%99%E6%8E%88/"/>
    
    
      <category term="感悟" scheme="http://yoursite.com/tags/%E6%84%9F%E6%82%9F/"/>
    
      <category term="人生方向" scheme="http://yoursite.com/tags/%E4%BA%BA%E7%94%9F%E6%96%B9%E5%90%91/"/>
    
      <category term="智慧" scheme="http://yoursite.com/tags/%E6%99%BA%E6%85%A7/"/>
    
      <category term="成长" scheme="http://yoursite.com/tags/%E6%88%90%E9%95%BF/"/>
    
  </entry>
  
</feed>
